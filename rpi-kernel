#!/usr/bin/env bash

set -o nounset
set -o errexit


echo "Building from http://github.com/raspberrypi/linux ..."

# Process script arguments
GIT_BRANCH=$(wget https://api.github.com/repos/raspberrypi/linux -qq -O - | sed -n "s/.*\"default_branch\": \"\([^\"]\+\)\".*/\1/p")
KERNEL_VER_EXPECTED=""
MAKE_TARGETS=""
while [[ $# > 1 ]]; do
	KEY="$1"
	case ${KEY} in
		-b|--branch)
			GIT_BRANCH=${2:-${GIT_BRANCH}}
			shift
			;;
		-v|--version)
			KERNEL_VER_EXPECTED=$2
			shift
			;;
		*)
			break
			;;
	esac
	shift
done
MAKE_TARGETS=${@:-zImage modules dtbs}

# Find branch's current version
if [[ "${GIT_BRANCH}" == "" ]]; then
	echo "   Unable to find git branch"
	exit 1
fi
KERNEL_MAKE=$(wget https://raw.githubusercontent.com/raspberrypi/linux/${GIT_BRANCH}/Makefile -qq -O - || true)
if [[ "${KERNEL_MAKE}" == "" ]]; then
	echo "   Unable to download ${GIT_BRANCH} makefile"
	exit 1
fi
KERNEL_MAKE_VERSION=$(echo "${KERNEL_MAKE}" | sed -n "s/\s*VERSION\s*=\s*\([0-9]\+\)\s*/\1/p")
KERNEL_MAKE_PATCHLEVEL=$(echo "${KERNEL_MAKE}" | sed -n "s/\s*PATCHLEVEL\s*=\s*\([0-9]\+\)\s*/\1/p")
KERNEL_MAKE_SUBLEVEL=$(echo "${KERNEL_MAKE}" | sed -n "s/\s*SUBLEVEL\s*=\s*\([0-9]\+\)\s*/\1/p")
KERNEL_VER="${KERNEL_MAKE_VERSION}.${KERNEL_MAKE_PATCHLEVEL}.${KERNEL_MAKE_SUBLEVEL}"
echo "   Branch ${GIT_BRANCH} version:"
echo "      ${KERNEL_VER}"
if [[ -n "${KERNEL_VER_EXPECTED}" && "${KERNEL_VER}" != "${KERNEL_VER_EXPECTED}" ]]; then
	echo "      Did not find expected version: ${KERNEL_VER_EXPECTED}"
	echo ""
	exit 1
fi
KERNEL_DIR="/usr/src/linux-${KERNEL_VER}"

# Check previous build
if [[ -e "${KERNEL_DIR}/arch/arm/boot/zImage" ]]; then
	echo "   ${KERNEL_VER} already built:"
	echo "      ${KERNEL_DIR}"
	echo ""
	exit 0
fi

# Clone from git
if [[ -e "${KERNEL_DIR}" ]]; then
	echo "   Deleting ${KERNEL_DIR}/ ..."
	sudo rm -rf "${KERNEL_DIR}" > /dev/null
fi
echo "   Cloning from git (very large) to ${KERNEL_DIR} ..."
sudo git clone --quiet --depth 1 git://github.com/raspberrypi/linux.git --branch "${GIT_BRANCH}" "${KERNEL_DIR}" > /dev/null
if [[ ! -e "${KERNEL_DIR}/Makefile" ]]; then
	echo "      Git clone failed"
	echo ""
	exit 1
fi
cd "${KERNEL_DIR}"
	
# Prep work (depending on RPi 1 vs 2/3)
echo "   Running make mrproper/defconfig/kernelrelease (prep) ..."
sudo make mrproper > /dev/null
CPU_HARDWARE=$(grep Hardware /proc/cpuinfo | awk '{print $3}')
if [[ "${CPU_HARDWARE}" == "BCM2708" || "${CPU_HARDWARE}" == "BCM2835" ]]; then
	KERNEL="kernel"
	sudo make bcmrpi_defconfig > /dev/null
elif [[ "${CPU_HARDWARE}" == "BCM2709" || "${CPU_HARDWARE}" == "BCM2836" || "${CPU_HARDWARE}" == "BCM2837" ]]; then
	KERNEL="kernel7"
	sudo make bcm2709_defconfig > /dev/null
else
	echo "      Hardware not explicitly supported, guessing defconfig ..."
	KERNEL="kernel$(uname -r | sed -n "s/.*-v\([0-9]\+\).*/\1/p")"
	sudo make $(echo "${CPU_HARDWARE}" | awk '{print tolower($0)}')_defconfig > /dev/null || (
		echo "         Guessed wrong, attempting to use current kernel config ..."
		zcat /proc/config.gz | sudo tee .config > /dev/null
		sudo make oldconfig > /dev/null
	)
fi
sudo make kernelrelease > /dev/null
KERNEL_VER=$(make -s kernelrelease)
echo "      Kernel release version: ${KERNEL_VER}"

# Build based on $MAKE_TARGETS
echo "   Running make ${MAKE_TARGETS// //} (build) ..."
sudo make -j$(nproc) ${MAKE_TARGETS} > /dev/null
if [[
( "${MAKE_TARGETS}" == *"zImage"* && ! -e "arch/arm/boot/zImage" ) || \
( "${MAKE_TARGETS}" == *"modules"* && ! -e "net/wireless/cfg80211.ko" ) || \
( "${MAKE_TARGETS}" == *"dtbs"* && "$(ls arch/arm/boot/dts/*.dtb 2> /dev/null)" == "" ) \
]]; then
	echo "      Build failed"
	echo ""
	exit 1
fi

# Install what was built
if [[ "${MAKE_TARGETS}" == *"zImage"* ]]; then
	echo "   Installing kernel ..."
	sudo cp arch/arm/boot/zImage /boot/$KERNEL.img > /dev/null
	echo "      A reboot is required to use the new kernel"
fi
if [[ "${MAKE_TARGETS}" == *"modules"* ]]; then
	echo "   Installing modules ..."
	sudo make modules_install > /dev/null
fi
if [[ "${MAKE_TARGETS}" == *"dtbs"* ]]; then
	echo "   Installing device tree ..."
	sudo cp arch/arm/boot/dts/*.dtb /boot/
	sudo cp arch/arm/boot/dts/overlays/*.dtb* /boot/overlays/
	sudo cp arch/arm/boot/dts/overlays/README /boot/overlays/
	echo "      A reboot is required to use the new device tree"
fi

echo ""
